// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: node.proto

package rpcpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Sent from client or predecessor replica to head/middle/tail
type WriteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Seq           uint64                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	FileName      string                 `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteReq) Reset() {
	*x = WriteReq{}
	mi := &file_node_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteReq) ProtoMessage() {}

func (x *WriteReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteReq.ProtoReflect.Descriptor instead.
func (*WriteReq) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{0}
}

func (x *WriteReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *WriteReq) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *WriteReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *WriteReq) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Sent back by the tail when commit succeeds
type WriteAck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Seq           uint64                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteAck) Reset() {
	*x = WriteAck{}
	mi := &file_node_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAck) ProtoMessage() {}

func (x *WriteAck) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAck.ProtoReflect.Descriptor instead.
func (*WriteAck) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{1}
}

func (x *WriteAck) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *WriteAck) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

// Request to read a chunk (usually from tail)
type ReadReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadReq) Reset() {
	*x = ReadReq{}
	mi := &file_node_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadReq) ProtoMessage() {}

func (x *ReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadReq.ProtoReflect.Descriptor instead.
func (*ReadReq) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{2}
}

func (x *ReadReq) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

// Carries the latest chunk metadata
type ReadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Seq           uint64                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	FileName      string                 `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	mi := &file_node_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{3}
}

func (x *ReadResponse) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ReadResponse) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *ReadResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ReadResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Used to fetch version info (used by predecessor replicas)
type VersionQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionQuery) Reset() {
	*x = VersionQuery{}
	mi := &file_node_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionQuery) ProtoMessage() {}

func (x *VersionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionQuery.ProtoReflect.Descriptor instead.
func (*VersionQuery) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{4}
}

func (x *VersionQuery) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

// Carries latest clean version info
type VersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChunkId       string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Seq           uint64                 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	FileName      string                 `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	mi := &file_node_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{5}
}

func (x *VersionResponse) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *VersionResponse) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *VersionResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *VersionResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

var File_node_proto protoreflect.FileDescriptor

const file_node_proto_rawDesc = "" +
	"\n" +
	"\n" +
	"node.proto\x12\x05rpcpb\"h\n" +
	"\bWriteReq\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x04R\x03seq\x12\x1b\n" +
	"\tfile_name\x18\x03 \x01(\tR\bfileName\x12\x12\n" +
	"\x04path\x18\x04 \x01(\tR\x04path\"7\n" +
	"\bWriteAck\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x04R\x03seq\"$\n" +
	"\aReadReq\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\"l\n" +
	"\fReadResponse\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x04R\x03seq\x12\x1b\n" +
	"\tfile_name\x18\x03 \x01(\tR\bfileName\x12\x12\n" +
	"\x04path\x18\x04 \x01(\tR\x04path\")\n" +
	"\fVersionQuery\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\"o\n" +
	"\x0fVersionResponse\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x10\n" +
	"\x03seq\x18\x02 \x01(\x04R\x03seq\x12\x1b\n" +
	"\tfile_name\x18\x03 \x01(\tR\bfileName\x12\x12\n" +
	"\x04path\x18\x04 \x01(\tR\x04path2\x9b\x01\n" +
	"\x04Node\x12)\n" +
	"\x05Write\x12\x0f.rpcpb.WriteReq\x1a\x0f.rpcpb.WriteAck\x12+\n" +
	"\x04Read\x12\x0e.rpcpb.ReadReq\x1a\x13.rpcpb.ReadResponse\x12;\n" +
	"\fQueryVersion\x12\x13.rpcpb.VersionQuery\x1a\x16.rpcpb.VersionResponseB\tZ\a.;rpcpbb\x06proto3"

var (
	file_node_proto_rawDescOnce sync.Once
	file_node_proto_rawDescData []byte
)

func file_node_proto_rawDescGZIP() []byte {
	file_node_proto_rawDescOnce.Do(func() {
		file_node_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_node_proto_rawDesc), len(file_node_proto_rawDesc)))
	})
	return file_node_proto_rawDescData
}

var file_node_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_node_proto_goTypes = []any{
	(*WriteReq)(nil),        // 0: rpcpb.WriteReq
	(*WriteAck)(nil),        // 1: rpcpb.WriteAck
	(*ReadReq)(nil),         // 2: rpcpb.ReadReq
	(*ReadResponse)(nil),    // 3: rpcpb.ReadResponse
	(*VersionQuery)(nil),    // 4: rpcpb.VersionQuery
	(*VersionResponse)(nil), // 5: rpcpb.VersionResponse
}
var file_node_proto_depIdxs = []int32{
	0, // 0: rpcpb.Node.Write:input_type -> rpcpb.WriteReq
	2, // 1: rpcpb.Node.Read:input_type -> rpcpb.ReadReq
	4, // 2: rpcpb.Node.QueryVersion:input_type -> rpcpb.VersionQuery
	1, // 3: rpcpb.Node.Write:output_type -> rpcpb.WriteAck
	3, // 4: rpcpb.Node.Read:output_type -> rpcpb.ReadResponse
	5, // 5: rpcpb.Node.QueryVersion:output_type -> rpcpb.VersionResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_node_proto_init() }
func file_node_proto_init() {
	if File_node_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_node_proto_rawDesc), len(file_node_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_node_proto_goTypes,
		DependencyIndexes: file_node_proto_depIdxs,
		MessageInfos:      file_node_proto_msgTypes,
	}.Build()
	File_node_proto = out.File
	file_node_proto_goTypes = nil
	file_node_proto_depIdxs = nil
}
